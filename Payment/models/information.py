# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401
from base_model_ import Model

class Information(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, method: object=None, price: int=None, client: str=None):  # noqa: E501
        """Information - a model defined in Swagger

        :param method: The method of this Information.  # noqa: E501
        :type method: object
        :param price: The price of this Information.  # noqa: E501
        :type price: int
        :param client: The client of this Information.  # noqa: E501
        :type client: str
        """
        self.swagger_types = {
            'method': object,
            'price': int,
            'client': str
        }

        self.attribute_map = {
            'method': 'method',
            'price': 'price',
            'client': 'client'
        }
        self._method = method
        self._price = price
        self._client = client

    @classmethod
    def from_dict(cls, dikt) -> 'Information':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Information of this Information.  # noqa: E501
        :rtype: Information
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self) -> object:
        """Gets the method of this Information.


        :return: The method of this Information.
        :rtype: object
        """
        return self._method

    @method.setter
    def method(self, method: object):
        """Sets the method of this Information.


        :param method: The method of this Information.
        :type method: object
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def price(self) -> int:
        """Gets the price of this Information.


        :return: The price of this Information.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Information.


        :param price: The price of this Information.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def client(self) -> str:
        """Gets the client of this Information.


        :return: The client of this Information.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client: str):
        """Sets the client of this Information.


        :param client: The client of this Information.
        :type client: str
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client
